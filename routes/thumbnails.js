var express = require('express');
var router = express.Router();
const Thumbnail = require('../models/thumbnail');
const mongoose = require('mongoose');
const debug = require('debug')('geo:thumbnails');
const ObjectId = mongoose.Types.ObjectId;
const utils = require('./utils');
const Guess = require('../models/guess');

/* GET thumbnails listing. */

/**
 * @api {get} /thumbnails List thumbnails
 * @apiName RetrieveThumbnails
 * @apiGroup Thumbnail
 * @apiVersion 1.0.0
 * @apiDescription Retrieves all thumbnails ordered by creation date.
 *
 * @apiUse ThumbnailInResponseBody
 * @apiUse ThumbnailIncludes
 *
 * @apiExample Example
 *     GET /thumbnails HTTP/1.1
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *     Link: &lt;https://evening-meadow-25867.herokuapp.com/api/movies?page=1&pageSize=50&gt;; rel="first prev"
 *
 *     [
 *       {
 *         "id": "58b2926f5e1def0123e97281",
 *         "title": "Beautiful landscape",
 *         "user_id": "5dbaec66b6c35e0017c82115",
 *         "location": {"type": "Point", "coordinates": [ -73.856077, 40.848447 ]},
 *         "img": "/sdcard/Images/landscape_image.jpg"
 *       }
 *       {
 *         "id": "31b2926f5e1def0123e97282",
 *         "title": "Bâtiment historique",
 *         "user_id": "6bbaec66b6c35e0017c82131",
 *         "location": {"type": "Point", "coordinates": [ -23.856076, 47.848445 ]},
 *         "img": "/sdcard/Images/building_image.jpg"
 *       }
 *     ]
 */

router.get('/', function(req, res, next) {
  Thumbnail.find().sort('created_at').exec(function(err, thumbnails) {
    if (err) {
      return next(err);
    }
    res.send(thumbnails);
  });
});

/**
 * @api {post} /thumbnails Create a thumbnail
 * @apiName CreateThumbnail
 * @apiGroup Thumbnail
 * @apiVersion 1.0.0
 * @apiDescription Adds a new thumbnail.
 *
 * @apiUse ThumbnailInRequestBody
 * @apiUse ThumbnailInResponseBody
 * @apiUse ThumbnailValidationError
 * @apiSuccess (Response body) {String} id A unique identifier for the thumbnail generated by the server
 *
 * @apiExample Example
 *     POST /thumbnails HTTP/1.1
 *     Content-Type: application/json
 *
 *     {
 *       "title": "Beautiful landscape",
 *       "user_id": "5dbaec66b6c35e0017c82115",
 *       "location": {"type": "Point", "coordinates": [ -73.856077, 40.848447 ]},
 *       "img": "/sdcard/Images/landscape_image.jpg"
 *     }
 *
 * @apiSuccessExample 201 Created
 *     HTTP/1.1 201 Created
 *     Content-Type: application/json
 *     Location: https://comem-archioweb-2019-2020-g.herokuapp.com/thumbnnails/58b2926f5e1def0123e97bc0
 *
 *     {
 *       "id": "58b2926f5e1def0123e97bc0",
 *       "title": "Beautiful landscape",
 *       "user_Id": "78b2926f5e1def0123e97bc0"
 *       "location": {"type": "Point", "coordinates": [ -73.856077, 40.848447 ]},
 *       "img": "/sdcard/Images/landscape_image.jpg"
 *     }
 */

/* POST new thumbnail */
router.post('/', function(req, res, next) {
  // Create a new document from the JSON in the request body
  const newThumbnail = new Thumbnail(req.body);
  // Save that document
  newThumbnail.save(function(err, savedThumbnail) {
    if (err) {
      return next(err);
    }
    // Send the saved document in the response
    res
    .status(201)
    .set('Location', `${config.baseUrl}/thumbnails/${savedThumbnail._id}`)
    .send(savedThumbnail);
  });
});



/*GET one thumbnail*/
router.get('/:id', loadThumbnailFromParamsMiddleware, function (req, res, next) {
  res.send(req.thumbnail);
});

function loadThumbnailFromParamsMiddleware(req, res, next) {

  const thumbnailId = req.params.id;
  if (!ObjectId.isValid(thumbnailId)) {
    return movieNotFound(res, thumbnailId);
  }

  let query = Thumbnail.findById(thumbnailId)

  query.exec(function (err, thumbnail) {
    if (err) {
      return next(err);
    } else if (!thumbnail) {
      return thumbnailNotFound(res, thumbnailId);
    }

    req.thumbnail = thumbnail;
    next();
  });
}

function thumbnailNotFound(res, thumbnailId) {
  return res.status(404).type('text').send(`No thumbnail found with ID ${thumbnailId}`);
}

/*DELETE thumbnail*/

/**
 * @api {delete} /thumbnails/:id Delete a thumbnail
 * @apiName DeleteThumbnail
 * @apiGroup Thumbnail
 * @apiVersion 1.0.0
 * @apiDescription Permanently deletes a thumbnail.
 *
 * @apiUse ThumbnailIdInUrlPath
 * @apiUse ThumbnailNotFoundError
 *
 * @apiExample Example
 *     DELETE /thumbnails/58b2926f5e1def0123e97bc0 HTTP/1.1
 *
 * @apiSuccessExample 204 No Content
 *     HTTP/1.1 204 No Content
 */
router.delete('/:id', loadThumbnailFromParamsMiddleware, function (req, res, next) {



    req.thumbnail.remove(function (err) {
      if (err) {
        return next(err);
      }
//requête pour effacer les guess puis renvoyer 204
Guess.remove({ thumbnail_id:req.thumbnail._id }, function(err){
    if (err) {
        return next(err);
      }
            debug(`Deleted thumbnail "${req.thumbnail.title}"`);
      res.sendStatus(204);
})
//Character.remove({ name: 'Eddard Stark' }, function)

    });
        });


/*PATCH thumbnail*/
router.patch('/:id', utils.requireJson, loadThumbnailFromParamsMiddleware, function (req, res, next) {

  // Update only properties present in the request body
  if (req.body.title !== undefined) {
    req.thumbnail.title = req.body.title;
  }



  req.thumbnail.save(function (err, savedThumbnail) {
    if (err) {
      return next(err);
    }

    debug(`Updated thumbnail "${savedThumbnail.title}"`);
    res.send(savedThumbnail);
  });
});

/**
 * @apiDefine ThumbnailInRequestBody
 * @apiParam (Request body) {String} title The title of the thumbnail
 * @apiParam (Request body) {String} user_id The unique identifier of the User that create the thumbnail
 * -- à vérifier le type : --
 * @apiParam (Request body) {String} img The path to the img of the thumbnail
 * @apiParam (Request body) {String} location The location at which the img of the thumbnail was taken
 */

/**
 * @apiDefine ThumbnailInResponseBody
 * @apiSuccess (Response body) {String} id The unique identifier of the thumbnail
 * @apiSuccess (Response body) {String} title The title of the thumbnail
 * @apiSuccess (Response body) {String} user_id The unique identifier of the User that created the thumbnail
 * -- à vérifier le type : --
 * @apiSuccess (Response body) {String} img The path to the img of the thumbnail
 * @apiSuccess (Response body) {String} location The location at which the img of the thumbnail was taken
 * -- . --
 * @apiSuccess (Response body) {String} createdAt The date at which the thumbnail was registered
 */

 /**
 * @apiDefine ThumbnailValidationError
 *
 * @apiError {Object} 422/UnprocessableEntity Some of the thumbnail's properties are invalid
 *
 * @apiErrorExample {json} 422 Unprocessable Entity
 *     HTTP/1.1 422 Unprocessable Entity
 *     Content-Type: application/json
 *
 *     {
 *       "message": "Thumbnail validation failed",
 *       "errors": {
 *         "title": {
 *           "kind": "string",
 *           "message": "`foo` is not a valid string value for path `title`.",
 *           "name": "ValidatorError",
 *           "path": "title",
 *           "properties": "string":,
 *             "message": "`{VALUE}` is not a valid string value for path `{PATH}`.",
 *             "path": "title",
 *             "type": "string",
 *             "value": "foo"
 *           },
 *           "value": "foo"
 *         }
 *       }
 *     }
 */

 /**
 * @apiDefine ThumbnailIdInUrlPath
 * @apiParam (URL path parameters) {String} id The unique identifier of the thumbnail to retrieve
 */

 /**
 * @apiDefine ThumbnailIncludes
 * @apiParam (URL query parameters) {String} [include] Embed linked resources in the response body:
 * * `"user"` for the thumbnail's owner
 */

 /**
 * @apiDefine ThumbnailNotFoundError
 *
 * @apiError {Object} 404/NotFound No thumbnail was found corresponding to the ID in the URL path
 *
 * @apiErrorExample {json} 404 Not Found
 *     HTTP/1.1 404 Not Found
 *     Content-Type: text/plain
 *
 *     No thumbnail found with ID 58b2926f5e1def0123e97281
 */

module.exports = router;